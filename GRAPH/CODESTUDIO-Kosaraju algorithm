#include <unordered_map>
#include <vector>
#include <list>
#include <stack>
void topo(int node,unordered_map<int,bool>&vis,unordered_map<int,list<int>>&adj,stack<int>&s){
	vis[node]=true;
	
	for(auto i:adj[node]){
		if(!vis[i]){
			topo(i,vis,adj,s);
		}
	}
	s.push(node);
}
void revdfs(int node,unordered_map<int,bool>&vis,unordered_map<int,list<int>>&adj){
	vis[node]=true;
	for(auto i:adj[node]){
		if(!vis[i]){
			revdfs(i,vis,adj);
		}
	}
}


int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	unordered_map<int,list<int>>adj;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		adj[u].push_back(u);
		
	}
    int count=0;
	stack<int>s;
	unordered_map<int,bool>vis;
	unordered_map<int,int>transpose;
	
	//preparing stack
	for(int i=0;i<v;i++){
		if(!vis[i]){
			topo(i,vis,adj,s);
		}
	}
	//preparing transpose graph
	for(int i=0;i<edges.size();i++){
		vis[i]=false;
		for(auto j:adj[i])transpose[j].push_back(i);
	}
	//using stack
	while(!s.empty()){
		int k=s.top();
		s.pop();

		for(auto i:adj[k]){
			if(!vis[i]){
				count++;
				revdfs(i,vis,transpose);
			}
		}
	}
	return count;
}
