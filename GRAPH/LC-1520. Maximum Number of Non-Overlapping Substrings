class Solution{
public:
//Kosaraju algo of graph is being used
// TC of the solution:O(n)   SC of the solution:O(n)
void dfs(int v, vector<vector<bool>>& graph, stack<int>& stk, vector<bool>& visited) {
    if (!visited[v]) {
        visited[v] = true;
        for (int i = 0; i < 26; i++) {
            if (graph[v][i] && !visited[i]) {
                dfs(i, graph, stk, visited);
            }
        }
        //topological sort
        stk.push(v);
    }
}

void dfs(int v, vector<vector<bool>>& graph, vector<int>& batches, int batch, vector<int>& degree) {
    if (batches[v] < 0) {
        batches[v] = batch;
        for (int i = 0; i < 26; i++) {
            if (graph[i][v]) {
                dfs(i, graph, batches, batch, degree);
            }
        }
    } else {
        if (batches[v] != batch) {
            degree[batches[v]] += 1;
        }
    }
}

vector<string> maxNumOfSubstrings(string S) {
    // Pre-compute in order to build the graph in O(N) time

    // Initialize arrays to keep track of the first and last occurrences of each character in the string
    vector<int> mins(26, INT_MAX);
    vector<int> maxs(26, -1);

    // Initialize an array to check if each character exists in the string
    vector<bool> exists(26, false);

    // 2D array to keep track of prefix sums of each character's occurrences in the string
    vector<vector<int>> prefixSum(S.length() + 1, vector<int>(26, 0));

    // Loop through the string and update the above arrays
    for (int i = 0; i < S.length(); i++) {
        // Copy the prefix sums of the previous character to the current character's position
        copy(prefixSum[i].begin(), prefixSum[i].end(), prefixSum[i + 1].begin());

        // Increment the count of the current character in the prefix sum array
        prefixSum[i + 1][S[i] - 'a'] += 1;

        // Update the first and last occurrences of the current character in the string
        mins[S[i] - 'a'] = min(mins[S[i] - 'a'], i);
        maxs[S[i] - 'a'] = max(maxs[S[i] - 'a'], i);

        // Mark that the current character exists in the string
        exists[S[i] - 'a'] = true;
    }

    // Build the graph using an adjacency matrix
    vector<vector<bool>> graph(26, vector<bool>(26, false));

    // Loop through the characters and their occurrences
    for (int i = 0; i < 26; i++) {
        // Check if the character exists in the string
        if (exists[i]) {
            // Check if there is a path from the first occurrence to the last occurrence for each character
            for (int j = 0; j < 26; j++) {
                if (prefixSum[maxs[i] + 1][j] - prefixSum[mins[i]][j] > 0) {
                    graph[i][j] = true;
                }
            }
        }
    }

    // Kosaraju's algorithm to find SCCs (Strongly Connected Components)

    // Stack to store the vertices while performing the first DFS
    stack<int> stk;

    // Array to mark whether a vertex has been visited during the first DFS
    vector<bool> visited(26, false);

    // First DFS to populate the stack with the vertices in their finishing order
    for (int i = 0; i < 26; i++) {
        if (exists[i] && !visited[i]) {
            dfs(i, graph, stk, visited);
        }
    }

    // Variable to keep track of each SCC's 'id'
    int batch = 0;

    // Array to store the SCC 'id' for each vertex
    vector<int> batches(26, -1);

    // Array to store the out-degree of each SCC
    vector<int> degree(26, 0);

    // Initialize the batches array with -1

    while (!stk.empty()) {
        // Get the next vertex from the stack
        int v = stk.top();
        stk.pop();

        // If the vertex has not been assigned to an SCC yet, perform DFS to mark the SCC for all connected vertices
        if (batches[v] < 0) {
            dfs(v, graph, batches, batch, degree);
            batch++;
        }
    }

    // Prepare the result by finding substrings for each SCC

    vector<string> res;
    for (int i = batch - 1; i >= 0; i--) {
        // Check if the SCC has an out-degree of 0 (i.e., no outgoing edges)
        if (degree[i] == 0) {
            int mini = INT_MAX, maxi= -1;

            // Find the minimum and maximum positions of characters belonging to this SCC
            for (int j = 0; j < 26; j++) {
                if (batches[j] == i) {
                    mini = min(mins[j], mini);
                    maxi = max(maxs[j], maxi);
                }
            }

            // Add the substring to the result list
            res.push_back(S.substr(mini, maxi - mini + 1));
        }
    }

    // Return the list of substrings forming the maximum number of non-overlapping substrings with the given properties
    return res;
}
};
