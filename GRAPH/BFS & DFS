#BFS CODE

#include <bits/stdc++.h> 
#include<unordered_map>

void bfs(unordered_map<int,set<int>>&adj,unordered_map<int,bool>&visited,vector<int>&ans,int index){
    queue<int>q;
    q.push(index);
    visited[index]=1;

    while(!q.empty()){
        int k=q.front();
        q.pop();
        ans.push_back(k);

        for(auto i:adj[k]){
          if (!visited[i]) {
            q.push(i);
            visited[i] = true;
          }
        }
    }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int,set<int>>adj;
    unordered_map<int,bool>visited;
    
    vector<int>ans;

    //preparing adjlist

    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].insert(v);
        adj[v].insert(u);
    }

    //using created bfs code
    for(int i=0;i<vertex;i++){
        if(!visited[i]){
            bfs(adj,visited,ans,i);
        }
    }
    return ans;
}

#DFS CODESTUDIO

#include<iostream>
#include <unordered_map>
#include<vector>
void dfs(unordered_map<int,set<int>>&adj,unordered_map<int,bool>&visited,vector<int>&component,int index){
    component.push_back(index);
    visited[index]=1;

    for(auto i:adj[index]){
        if(!visited[i]){
            dfs(adj,visited,component,i);
            visited[i]=1;
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    unordered_map<int,set<int>>adj;
    unordered_map<int,bool>visited;
    vector<vector<int>>ans;

    //preparing adjlist
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].insert(v);
        adj[v].insert(u);
    }
    //dfs traversal
    for(int i=0;i<V;i++){
        if(!visited[i]){
            vector<int>component;
            dfs(adj,visited,component,i);
            ans.push_back(component);
        }
    }
    return ans;
}

