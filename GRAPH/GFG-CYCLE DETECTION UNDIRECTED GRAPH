#USING BFS

class Solution {
  public:
    bool bfs(int src,vector<int>adj[],unordered_map<int,bool>&visited){
        visited[src]= 1;
        queue<pair<int,int>>q;
        q.push({src,-1});
        while(!q.empty()){
            int node= q.front().first;
            int parent= q.front().second;
            q.pop();
            for(auto adjentnode:adj[node])
            {
                if(!visited[adjentnode]){
                    visited[adjentnode]=1;
                    q.push({adjentnode,node});
                    
                }
                
                else if(parent!=adjentnode){
                    return true;
                }
            }
            
            
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
       unordered_map<int,bool>visited;
   
       for(int i=0;i<V;i++){
           if(!visited[i]){
              if(bfs(i,adj,visited))return true;
           }
       }
       return false;
    }
};
