class Solution{
    private:
    void dfs(stack<int>&s,vector<bool>&visited,int index,vector<int> adj[]){
        visited[index]=true;
        
        for(auto i:adj[index]){
            if(!visited[i]){
                dfs(s,visited,i,adj);
            }
        }
        //backtracking
        s.push(index);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int>ans;
	    stack<int>s;
	    vector<bool>visited(V);
	    //making dfs call for all elements
	    for(int i=0;i<V;i++){
	        if(!visited[i])dfs(s,visited,i,adj);
	    }
	    while(!s.empty()){
	        int top=s.top();
	        s.pop();
	        ans.push_back(top);
	    }
	    return ans;
	}
};
