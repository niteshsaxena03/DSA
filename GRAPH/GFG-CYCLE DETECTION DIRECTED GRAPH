class Solution {
  public:
     bool checkDfs(int &src,vector<int>&visited,vector<int>&dfsVisited,vector<int>adj[]){
        visited[src]=1;
        dfsVisited[src]=1;
        
        for(auto nbr:adj[src]){
            if(!visited[nbr]){
                bool ans=checkDfs(nbr,visited,dfsVisited,adj);
                if(ans==true)
                return true;
            }
            else{
                if(dfsVisited[nbr]==true)
                return true;
            }
        }
        dfsVisited[src]=0;
        return false;
    }
  
  
  
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        bool ans=false;
        vector<int>vis(V,0);
        vector<int>dfsVis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                 ans=checkDfs(i,vis,dfsVis,adj);
                if(ans==true)
                break;
            }
        }
        return ans;
    }
 
};
