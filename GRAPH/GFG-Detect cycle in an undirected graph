class Solution {
  private:
    bool bfs(int node,vector<bool>&visited,vector<int> adj[]){
        queue<pair<int,int>>q;
        q.push({node,-1});
        visited[node]=true;
        
        while(!q.empty()){
            int child=q.front().first;
            int parent=q.front().second;
            q.pop();
            
            for(auto i:adj[child]){
                if(!visited[i]){
                    visited[i]=true;
                    q.push({i,child});
                }
                else if(i!=parent){//this proves that we came back to an older node which was visited before too,so its a cycle
                  return true;
                }
            }
        }
        return false;
    }
  public:
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool>visited(V);
        for(int i=0;i<V;i++){
            if(!visited[i]){
               if(bfs(i,visited,adj))return true;
            }
        }
        return false;
    }
};
