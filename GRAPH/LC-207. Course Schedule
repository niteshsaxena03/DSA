class Solution {
public:
    bool cycleDetect(int index,vector<vector<int>>&adj,vector<bool>&visited,vector<bool>&parent){
        visited[index]=true;
        parent[index]=true;

        for(auto i:adj[index]){
            if(!visited[i]){
                bool check=cycleDetect(i,adj,visited,parent);
                if(check)return true;
            }
            else if(parent[i]==true)return true;
        }
        parent[index]=false;
        return false;
    }

    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>>adj(numCourses);
        vector<bool>visited(numCourses);
        vector<bool>parent(numCourses);

        //creating adj list
        for(auto i:prerequisites){
            adj[i[1]].push_back(i[0]);
        }

        //making dfs calls
        for(int i=0;i<numCourses;i++){
            if(!visited[i]){
                bool ans=cycleDetect(i,adj,visited,parent);
                if(ans)return false;
            }
        }
        return true;
    }
};
