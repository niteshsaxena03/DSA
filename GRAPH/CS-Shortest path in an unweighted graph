#include <unordered_map>
#include <list>
#include <queue>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	unordered_map<int,list<int>>adj;
	//creating adj list
	
	for(int i=0;i<edges.size();i++){
		int u=edges[i].first;
		int v=edges[i].second;
        adj[u].push_back(v);
		adj[v].push_back(u);

	}
	unordered_map<int,bool>visited;
	unordered_map<int,int>parent;
	queue<int>q;
	vector<int>ans;
	visited[s]=1;
	parent[s]=-1;

	q.push(s);
    //bfs traversal
	while(!q.empty()){
		int k=q.front();
		q.pop();

		for(auto i:adj[k]){
			if(!visited[i]){
				q.push(i);
				visited[i]=1;
				parent[i]=k;
			}
		}
	}
    //now we have parent array so we will start from target
	int target=t;
	ans.push_back(target);
	while(target!=s){
		target=parent[target];
		ans.push_back(target);
	}
	reverse(ans.begin(),ans.end());
	return ans;


}
