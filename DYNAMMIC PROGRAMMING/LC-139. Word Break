class Solution {
public:
    bool solve(string &s,unordered_set<string>&wordSet,vector<int>&dp,int index){
        //base case
        if(index==s.size())return true;

        if(dp[index]!=-1)return dp[index];

        //loop through every index
        for(int i=index;i<s.size();i++){
            string subString=s.substr(index,i-index+1);
            bool temp=solve(s,wordSet,dp,i+1);

            //checking presence of substring
            if(wordSet.count(subString) && temp){
                dp[index]=true;
                return true;
            }
        }
        return dp[index]=false;
    }

    bool wordBreak(string s, vector<string>& wordDict) {
        vector<int>dp(s.size(),-1);
        unordered_set<string>wordSet(wordDict.begin(),wordDict.end());
        return solve(s,wordSet,dp,0);
    }
};
