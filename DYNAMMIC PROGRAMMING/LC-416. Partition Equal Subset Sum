class Solution {
public:
    bool solvemem(vector<int>& nums,vector<vector<int>>&dp,int index,int target){
        if(index>=nums.size())return 0;
        if(target<0)return 0;
        if(target==0)return 1;
        if(dp[index][target]!=-1)return dp[index][target];
        bool incl=solvemem(nums,dp,index+1,target-nums[index]);
        bool excl=solvemem(nums,dp,index+1,target);
        return dp[index][target]=incl || excl;
        
    }

    bool canPartition(vector<int>& nums) {
        int n=nums.size();
       
        int sum=0;
        for(int i=0;i<nums.size();i++)sum+=nums[i];
        int target=sum/2;
        if(sum%2!=0)return false;
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        return solvemem(nums,dp,0,target);
        
        
    }
};
