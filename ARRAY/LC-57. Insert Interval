class Solution {
public:
    void mergeintervals(vector<vector<int>>&k,vector<vector<int>>&temp){
       if(k.size()<=1)return;
       sort(k.begin(),k.end());
       temp.push_back(k[0]);
       for(int i=1;i<k.size();i++){
           if(temp.back()[1]>=k[i][0])temp.back()[1]=max(temp.back()[1],k[i][1]);
           else temp.push_back(k[i]);
       }
    }

    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>>temp;
        if(intervals.size()==0){
            temp.push_back(newInterval);
            return temp;
        }
        if(intervals.size()==1){
            intervals.push_back(newInterval);
            mergeintervals(intervals,temp);
            return temp;
        }
        int n=intervals.size();
        for(int i=0;i<n;i++){
            if(intervals[i][0]>newInterval[0])intervals.push_back(newInterval);
        }
        if(intervals.size()==n)intervals.push_back(newInterval);
        
        mergeintervals(intervals,temp);
        return temp;
    }
};
