//striver method

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* curr=head;
        ListNode* fast=curr;
        ListNode* slow=curr;
        //getting to the nth node from beginning
        for(int i=0;i<n;i++)fast=fast->next;
        if(fast==NULL)return head->next;
       
        //moving fast pointer to the end
        while(fast->next!=NULL){
            fast=fast->next;
            slow=slow->next;
        }
        //now slow pointer is just before the required deletion node
        ListNode* del=slow->next;
        slow->next=slow->next->next;
        delete(del);
        return head;

    }
};


//my method
class Solution {
public:
    int len(ListNode* root){
        ListNode* temp=root;
        int count=1;
        while(temp->next!=NULL){
            count++;
            temp=temp->next;
        }
        return count;
    }

    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* curr=head;
        int p=len(head);
        if(head==NULL ||p==1)return NULL;
        int count=1;
        int index=p-n;
        if(index==0)return head->next;
        while(count<index){
            curr=curr->next;
            count++;
        }
       
        ListNode* k=curr->next;
        curr->next=curr->next->next;
        delete(k);
        return head;
    }
};
