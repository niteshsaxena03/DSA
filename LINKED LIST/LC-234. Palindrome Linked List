class Solution {
private:
    ListNode* reverse(ListNode* head){
        ListNode* curr=head;
        ListNode* prev=NULL;

        while(curr){
            ListNode* forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    ListNode* findMiddleNode(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head->next;

        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL||head->next==NULL)return true;
        ListNode* middle=findMiddleNode(head);
        ListNode* curr=head;

        ListNode* temp=middle->next;
        middle->next=NULL;

        ListNode* tempList=reverse(temp);
        
        ListNode* p1=head;
        ListNode* p2=tempList;

        while(p1 && p2){
            if(p1->val!=p2->val)return false;
            p1=p1->next;
            p2=p2->next;
        }
        return true;
    }
};
