//User function Template for C++
class node{
    public:
    int data;
    int i;
    int j;
    
    node(int data,int R,int C){
        this->data=data;
        i=R;
        j=C;
        
    
    }
};
class compare{
    public:
    bool operator()(node* a,node* b){
        return a->data>b->data;
    }
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
     priority_queue<node*,vector<node*>,compare>q;
     
     for(int i=0;i<K;i++){
         node* p=new node(arr[i][0],i,0);
         q.push(p);
     }
     vector<int>ans;
     while(!q.empty()){
         node *l=q.top();
         q.pop();
         
         ans.push_back(l->data);
         int i=l->i;
         int j=l->j;
         
         if(j+1<arr[i].size()){
             q.push(new node(arr[i][j+1],i,j+1));
         }
     }
     return ans;
    }
};
