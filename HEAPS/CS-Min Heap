#include <bits/stdc++.h> 

int lefty(int k){
    return 2*k+1;
}
int righty(int k){
    return 2*k+2;
}
int parent(int k){
    return (k-1)/2;
}

int heapify(vector<int>&heap,int k,int size){
    int left=lefty(k);
    int right=righty(k);

    int smallest=k;

    if(left<size && heap[left]<heap[smallest])smallest=left;

    if(right<size && heap[right]<heap[smallest])smallest=right;

    if(smallest!=k){
        swap(heap[smallest],heap[k]);

        heapify(heap,smallest,size);
    }
}

void insert(vector<int>&heap,int val,int &size){
    heap[size]=val;

    int i=size;
    size++;

    while(i!=0 && heap[i]<heap[parent(i)]){
        swap(heap[i],heap[parent(i)]);
        i=parent(i);
    }
}

int remove(vector<int>&heap,int &size){
    if(size==1){
        size--;
        return heap[0];
    }
    int ans=heap[0];

    swap(heap[0],heap[size-1]);

    size--;

    heapify(heap,0,size);

    return ans;
}

vector<int> minHeap(int n, vector<vector<int>>& q) {
    int size=0;

    vector<int>heap(n);

    vector<int>ans;

    for(int i=0;i<n;i++){
        if(q[i][0]==0){
            insert(heap,q[i][1],size);
        }else{
            ans.push_back(remove(heap,size));
        }
    }
    return ans;
}
