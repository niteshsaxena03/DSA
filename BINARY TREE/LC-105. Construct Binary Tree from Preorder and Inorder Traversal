class Solution {
public:
    TreeNode* solve(vector<int>& preorder,int preStart,int preEnd,vector<int>& inorder,int inStart,int inEnd,map<int,int>&mapi){
        //base case
        if(preStart>preEnd||inStart>inEnd)return NULL;

        TreeNode* root=new TreeNode(preorder[preStart]);

        int inRoot=mapi[root->val];
        int numinLeft=inRoot-inStart;

    root->left=solve(preorder,preStart+1,preStart+numinLeft,inorder,inStart,inRoot-1,mapi);
    root->right=solve(preorder,preStart+numinLeft+1,preEnd,inorder,inRoot+1,inEnd,mapi);

    return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        //creating map to store inorder values
        map<int,int>mapi;
        for(int i=0;i<inorder.size();i++)mapi[inorder[i]]=i;

        TreeNode* root=solve(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,mapi);

        return root;
    }
};
