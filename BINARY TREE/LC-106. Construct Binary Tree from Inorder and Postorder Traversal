class Solution {
public:
    TreeNode* solve(vector<int>& inorder,int inStart,int inEnd,vector<int>& postorder,int postStart,int postEnd,map<int,int>&mapi){
        if(inStart>inEnd||postStart>postEnd)return NULL;
         
        TreeNode* root=new TreeNode(postorder[postEnd]);
        int inRoot=mapi[root->val];
        int numinLeft=inRoot-inStart;

    root->left=solve(inorder,inStart,inRoot-1,postorder,postStart,postStart+numinLeft-1,mapi);
    root->right=solve(inorder,inRoot+1,inEnd,postorder,postStart+numinLeft,postEnd-1,mapi);

    return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        //creating map for inorder values
        map<int,int>mapi;
        for(int i=0;i<inorder.size();i++)mapi[inorder[i]]=i;

        TreeNode* root=solve(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mapi);

        return root;
    }
};
