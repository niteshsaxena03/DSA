class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)return 0;
        int ans=0;
        //pair of node and level
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});

        while(!q.empty()){
            int size=q.size();
            int minIndex=q.front().second;
            int first,last;
            for(int i=0;i<size;i++){
              int currentLevel=q.front().second-minIndex;
              TreeNode* currentNode=q.front().first;
              q.pop();
              
              if(i==0)first=currentLevel;
              if(i==size-1)last=currentLevel;

              if(currentNode->left)q.push({currentNode->left,1LL*currentLevel*2+1});
              if(currentNode->right)q.push({currentNode->right,1LL*currentLevel*2+2});
  
            }
            ans=max(ans,last-first+1);
        }
        return ans;
    }
};
