
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==NULL)return "";
        string str;
        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty()){
            TreeNode* front=q.front();
            q.pop();

            if(front==NULL)str.append("#,");
            else str.append(to_string(front->val)+",");

            if(front){
                q.push(front->left);
                q.push(front->right);
            }
        }
        return str;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0)return NULL;

        //breaking string into different objects
        stringstream ss(data);
        string str;
        getline(ss,str,',');

        queue<TreeNode*>q;
        TreeNode* root=new TreeNode(stoi(str));
        q.push(root);

        while(!q.empty()){
            TreeNode* front=q.front();
            q.pop();
            
            //for left node
            getline(ss,str,',');
            if(str=="#")front->left=NULL;
            else{
                TreeNode* leftNode=new TreeNode(stoi(str));
                front->left=leftNode;
                q.push(leftNode);
            }
            
            //for right node
            getline(ss,str,',');
            if(str=="#")front->right=NULL;
            else{
                TreeNode* rightNode=new TreeNode(stoi(str));
                front->right=rightNode;
                q.push(rightNode);
            }
        }
        return root;
    }
};

