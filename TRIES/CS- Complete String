#include <bits/stdc++.h> 

class TrieNode{
  private:
    TrieNode* links[26];
    bool flag=false;
  
  public:
    bool contains(char ch){
        return links[ch-'a']!=NULL;
    }
    TrieNode* get(char ch){
        return links[ch-'a'];
    }
    void put(char ch,TrieNode* node){
        links[ch-'a']=node;
    }
    void setEnd(){
        flag=true;
    }
    bool isEnd(){
        return flag;
    }
};

class Trie{
    private:
      TrieNode* root;

    public:
      Trie(){
          root=new TrieNode();
      }
      void insert(string word){
          TrieNode* node=root;
          for(auto i:word){
              if(node->contains(i)==false)node->put(i,new TrieNode());
              node=node->get(i);
          }
          node->setEnd();
      }
      bool checkIfPrefixExist(string word){
          TrieNode* node=root;
          for(auto i:word){
              if(node->contains(i)){
                  node=node->get(i);
                  if(node->isEnd()==false)return false;
              }
              else return false;
          }
          return true;
      }
};

string completeString(int n, vector<string> &a){
    Trie temp;
    for(auto i:a)temp.insert(i);
    string ans="";

    for(auto i:a){
        if(temp.checkIfPrefixExist(i)){
            if(i.size()>ans.size())ans=i;

            //taking lexographical smallest string
            else if(i.size()==ans.size() && i<ans)ans=i;
        }
    }
    if(ans=="")return "None";
    return ans;
}
