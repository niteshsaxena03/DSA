#include <bits/stdc++.h> 
class TrieNode{
private:
    TrieNode* links[26];
    int countEndsWith=0;
    int countPrefix=0;

public:
    bool contains(char ch){
        return links[ch-'a']!=NULL;
    }
    TrieNode* get(char ch){
        return links[ch-'a'];
    }
    void put(char ch,TrieNode* node){
        links[ch-'a']=node;
    }
    void increaseEnd(){
        countEndsWith++;
    }
    void increasePrefix(){
        countPrefix++;
    }
    void deleteEnd(){
        countEndsWith--;
    }
    void reducePrefix(){
        countPrefix--;
    }
    int getEnd(){
        return countEndsWith;
    }
    int getPrefix(){
        return countPrefix;
    }

};

class Trie{
    private:
    TrieNode* root;

    public:

    Trie(){
        root=new TrieNode();
    }

    void insert(string &word){
       TrieNode* node=root;
       for(auto i:word){
           if(node->contains(i)==false){
               node->put(i,new TrieNode);
           }
           node=node->get(i);
           node->increasePrefix();
       }
       node->increaseEnd();
    }

    int countWordsEqualTo(string &word){
      TrieNode* node=root;
      for(auto i:word){
          if(node->contains(i))node=node->get(i);
          else return 0;
      }
      return node->getEnd();
    }

    int countWordsStartingWith(string &word){
        TrieNode* node=root;
        for(auto i:word){
            if(node->contains(i))node=node->get(i);
            else return 0;
        }
        return node->getPrefix();
    }

    void erase(string &word){
       TrieNode* node=root;
       for(auto i:word){
           if(node->contains(i)){
               node=node->get(i);
               node->reducePrefix();
           }
           else return;
       }
       node->deleteEnd();
    }
};
