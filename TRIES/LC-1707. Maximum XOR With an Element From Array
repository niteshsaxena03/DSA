class TrieNode{
    private:
      TrieNode* child[2];
    public:
      bool contains(int bit){
          return child[bit];
      }
      void put(int bit,TrieNode* node){
          child[bit]=node;
      }
      TrieNode* get(int bit){
          return child[bit];
      }
};

class Trie{
    private:
      TrieNode* root;
    public:
      Trie(){
          root=new TrieNode();
      }
      //using 32 bits representation of number for insertion
      void insert(int num){
          TrieNode* node=root;
          for(int i=31;i>=0;i--){
              int bit=(num>>i)&1;
              if(!(node->contains(bit))){
                  node->put(bit,new TrieNode());
              }
              //go to the node
              node=node->get(bit);
          }
      }
      //checking maximum XOR
      int getMax(int num){
          TrieNode* node=root;
          int ans=0;

          for(int i=31;i>=0;i--){
              int bit=(num>>i)&1;
              if(node->contains(1-bit)){
                  ans=ans|(1<<i);
                  node=node->get(1-bit);
              }else{
                  node=node->get(bit);
              }
          }
          return ans;
      }
};

class Solution {
private:
    static bool cmp(vector<int>&a,vector<int>&b){
        return a[1]<b[1];
    }
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int>ans(queries.size(),0);
        sort(nums.begin(),nums.end());

        vector<vector<int>>offlineQueries;
        //putting all queries into vector
        for(int i=0;i<queries.size();i++){
            offlineQueries.push_back({queries[i][0],queries[i][1],i});
        }
        sort(offlineQueries.begin(),offlineQueries.end(),cmp);

        int index=0;
        Trie temp;

        //doing insertion in trie and fining max for every index in offline query array

        for(int i=0;i<offlineQueries.size();i++){
            int ai=offlineQueries[i][0];
            int xi=offlineQueries[i][1];
            int queryIndex=offlineQueries[i][2];
            
            //we can only put elements equal to size of nums array
            while(index<nums.size() && nums[index]<=xi){
                temp.insert(nums[index]);
                index++;
            }
            if(index==0)ans[queryIndex]=-1;
            else ans[queryIndex]=temp.getMax(ai);
        }
        return ans;
    }
};
