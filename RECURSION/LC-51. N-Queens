class Solution {
public:
    void solve(int col,vector<string>&board,vector<vector<string>>&ans,vector<int>&leftrow,vector<int>&leftupperdiagonal,vector<int>&leftlowerdiagonal,int n){
        //base case
        if(col==n){
            ans.push_back(board);
            return;
        }
        //checking and filling board
        for(int row=0;row<n;row++){
            //checking if queen is there or not
            if(leftrow[row]==0 && leftupperdiagonal[row+col]==0 && leftlowerdiagonal[col-row+n-1]==0){
                board[row][col]='Q';
                leftrow[row]=1;
                leftupperdiagonal[row+col]=1;
                leftlowerdiagonal[col-row+n-1]=1;
                //recursive call
                solve(col+1,board,ans,leftrow,leftupperdiagonal,leftlowerdiagonal,n);
                //backtracking
                board[row][col]='.';
                leftrow[row]=0;
                leftupperdiagonal[row+col]=0;
                leftlowerdiagonal[col-row+n-1]=0;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);

        string s(n,'.');
        //filling board array initially
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        //creating map for storing left row
        vector<int>leftrow(n,0);
        //creating map for left upper diagonal
        vector<int>leftupperdiagonal(2*n-1,0);
        //creating map for storing left lower diagonal
        vector<int>leftlowerdiagonal(2*n-1,0);
        
        //final function
        solve(0,board,ans,leftrow,leftupperdiagonal,leftlowerdiagonal,n);
        return ans;

    }
};
