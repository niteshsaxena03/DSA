class Solution {
public:
    void add(vector<string>&board, vector<vector<string>>&ans,int n){
        vector<string>temp;
        for(int i=0;i<n;i++){
            temp.push_back(board[i]);
        }
        ans.push_back(temp);
    }
    bool valid(vector<string>&board,int n,int row,int col){
        int x=row,y=col;

        //checking same row
        while(y>=0){
            if(board[x][y]=='Q')return false;
            y--;
        }

        //checking diagonals
        x=row;
        y=col;
        while(x>=0 && y>=0){
            if(board[x][y]=='Q')return false;
            x--;
            y--;
        }
        x=row;
        y=col;
        while(x<n && y>=0){
            if(board[x][y]=='Q')return false;
            x++;
            y--;
        }
        return true;
    }

    void solve(vector<string>&board,vector<vector<string>>&ans,int n,int col){
        if(col>=n){
            add(board,ans,n);
            return ;
        }
        for(int i=0;i<n;i++){
            if(valid(board,n,i,col)){
                board[i][col]='Q';
                solve(board,ans,n,col+1);
                //backtracking
                board[i][col]='.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        string x="";
        for(int i=0;i<n;i++){
            x+='.';
        }
        vector<string>board(n,x);
        vector<vector<string>>ans;
        solve(board,ans,n,0);
        return ans;
    }
};
