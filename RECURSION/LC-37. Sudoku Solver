class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board,0,0);
    }
    
    bool solve(vector<vector<char>>& board,int row,int col){
        //base cases
        if(row==9)return true;
        if(col==9)return solve(board,row+1,0);
        if(board[row][col]!='.')return solve(board,row,col+1);

        for(char c='1';c<='9';c++){
            if(valid(board,row,col,c)){
                board[row][col]=c;

                if(solve(board,row,col+1))return true;
                
                //backtracking
                board[row][col]='.';
            }
        }
        return false;
    }

    bool valid(vector<vector<char>>& board,int row,int col,int c){
        //checking all
        for(int i=0;i<9;i++){
            //checking same row
            if(board[row][i]==c)return false;
            //checking same col
            if(board[i][col]==c)return false;
            //checking same block
            int blockrow=3*(row/3)+i/3;
            int blockcol=3*(col/3)+i%3;
            if(board[blockrow][blockcol]==c)return false;
            }
            return true;
    }
};
